require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe Admin::PostsController, :type => :controller do

  describe "GET index" do
    let(:action) { get :index }

    it_behaves_like :action_that_requires_authentication do
      before { action }
    end

    context 'logged in' do
      before { login! }

      it "assigns all posts as @posts" do
        post = create :post
        action
        expect(assigns(:posts)).to eq([post])
      end
    end
  end

  describe "GET show" do
    let(:action) { get :show, post.to_path_params }
    let(:post) { create :post }

    it_behaves_like :action_that_requires_authentication do
      before { action }
    end

    context 'logged in' do
      before { login! }

      it "assigns the requested post as @post" do
        action
        expect(assigns(:post)).to eq(post)
      end
    end
  end

  describe "GET new" do
    let(:action) { get :new }

    it_behaves_like :action_that_requires_authentication do
      before { action }
    end

    context 'logged in' do
      before { login! }

      it "assigns a new post as @post" do
        action
        expect(assigns(:post)).to be_a_new(Post)
      end
    end
  end

  describe "GET edit" do
    let(:action) { get :edit, post.to_path_params }
    let(:post) { create :post }

    it_behaves_like :action_that_requires_authentication do
      before { action }
    end

    context 'logged in' do
      before { login! }

      it "assigns the requested post as @post" do
        action
        expect(assigns(:post)).to eq(post)
      end
    end
  end

  describe "POST create" do
    let(:action) { post :create, params }

    it_behaves_like :action_that_requires_authentication do
      let(:params) { {} }
      before { action }
    end

    context 'logged in' do
      before { login! }

      describe "with valid params" do
        let(:params) { { post: attributes_for(:post).merge(category_id: category.id) } }
        let(:category) { create :category }

        it "creates a new Post" do
          expect {
            action
          }.to change(Post, :count).by(1)
        end

        it "assigns a newly created post as @post" do
          action
          expect(assigns(:post)).to be_a(Post)
          expect(assigns(:post)).to be_persisted
        end

        it "redirects to the created post" do
          action
          expect(response).to redirect_to(admin_post_path(Post.last))
        end
      end

      describe "with invalid params" do
        let(:params) { { post: { title: '' } } }

        it "assigns a newly created but unsaved post as @post" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Post).to receive(:save).and_return(false)
          action
          expect(assigns(:post)).to be_a_new(Post)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Post).to receive(:save).and_return(false)
          action
          expect(response).to render_template("new")
        end
      end
    end
  end

  describe "PUT update" do
    let(:action) { put :update, params.merge(post.to_path_params) }
    let(:post) { create :post }

    it_behaves_like :action_that_requires_authentication do
      let(:params) { {} }
      before { action }
    end

    context 'logged in' do
      before { login! }

      describe "with valid params" do
        let(:params) { { post: { title: "MyString" } } }

        it "updates the requested post" do
          # Assuming there are no other posts in the database, this
          # specifies that the Post created on the previous line
          # receives the :update_attributes message with whatever params are
          # submitted in the request.
          expect_any_instance_of(Post).to receive(:update).with({ "title" => "MyString" })
          action
        end

        it "assigns the requested post as @post" do
          action
          expect(assigns(:post)).to eq(post)
        end

        it "redirects to the post" do
          action
          expect(response).to redirect_to(admin_post_url(post))
        end
      end

      describe "with invalid params" do
        let(:params) { { post: { title: '' } } }

        it "assigns the post as @post" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Post).to receive(:update).and_return(false)
          action
          expect(assigns(:post)).to eq(post)
        end

        it "re-renders the 'edit' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Post).to receive(:update).and_return(false)
          action
          expect(response).to render_template("edit")
        end
      end
    end
  end

  describe "DELETE destroy" do
    let(:action) { delete :destroy, post.to_path_params }
    let!(:post) { create :post }

    it_behaves_like :action_that_requires_authentication do
      before { action }
    end

    context 'logged in' do
      before { login! }

      it "destroys the requested post" do
        expect {
          action
        }.to change(Post, :count).by(-1)
      end

      it "redirects to the posts list" do
        action
        expect(response).to redirect_to(admin_posts_url)
      end
    end
  end

end
